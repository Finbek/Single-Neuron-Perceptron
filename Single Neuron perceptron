import tensorflow as tf
import numpy  as np

# hyperparameters 

learning_rate = 0.4 
epsilon = 1e-03 # minmum accepted error
max_epochs = 100 # max epochs

# Threshold Activation Function
def threshold(x):
    cond = tf.less(x, tf.zeros(tf.shape(x), dtype = x.dtype))
    out = tf.where(cond, tf.zeros(tf.shape(x)), tf.ones(tf.shape(x)))
    return out
    
# a three input neuron (a, b, c)
# Training Data y = ab + bc,sum of two linear functions.
T, F = 1., 0.
X_in = [[T,T,T,T],[T,T,F,T],[T,F,T,T],[T,F,F,T],[F,T,T,T],[F,T,F,T],[F,F,T,T],[F,F,F,T]]
Y = [[T],[T],[F],[F],[T],[F],[F],[F]]

W = tf.Variable(tf.random_normal([4,1], stddev=2, seed=0))
h = tf.matmul(X_in, W)
Y_hat = threshold(h)
error = Y-Y_hat
mean_error = tf.reduce_mean(tf.square(error))
dW = learning_rate * tf.matmul(X_in, error, transpose_a=True)
train = tf.assign(W, W+dW)
init = tf.global_variables_initializer()
err = 1
epoch = 0
with tf.Session() as sess:
    sess.run(init)
    while err > epsilon and epoch < max_epochs:
        epoch +=1
        err, _ = sess.run([mean_error, train])
        print('Epoch: {0} mean error: {1}'.format(epoch, err))
    print('Training Completed')
